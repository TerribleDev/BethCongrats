{"version":3,"sources":["App.js","serviceWorker.js","index.js","App.module.scss"],"names":["Header","pose","h1","start","x","end","transition","duration","Balloon","_ref","y","Posed","span","concat","Math","ceil","random","type","ease","react_default","a","createElement","initialPose","style","fontSize","position","left","bottom","App","_useState","useState","_useState2","Object","slicedToArray","showBalloons","setShowBalloons","refContainer","useRef","width","current","getBoundingClientRect","balloons","row","i","push","key","Fragment","ref","className","styles","app","onPoseComplete","zIndex","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"+LAKMA,EAASC,IAAKC,GAAG,CACrBC,MAAO,CACLC,EAAG,UAELC,IAAK,CACHD,EAAG,EACHE,WAAY,CACVC,SAAU,QAIhB,SAASC,EAATC,GAA2B,IAARL,EAAQK,EAARL,EAAGM,EAAKD,EAALC,EACdC,EAAQV,IAAKW,KAAK,CACtBT,MAAO,CACLO,EAAGA,GAELL,IAAK,CACHK,EAAC,IAAAG,OAAMC,KAAKC,KAAqB,IAAhBD,KAAKE,UAArB,MACDV,WAAY,CACVW,KAAM,QACNV,SAAU,IACVW,KAAM,aAIZ,OACEC,EAAAC,EAAAC,cAACV,EAAD,CAAOW,YAAY,QAAQrB,KAAK,MAAMsB,MAAO,CAAEC,SAAU,OAAQC,SAAU,QAASC,KAAMtB,EAAGuB,OAAQ,IAArG,gBAuCWC,MAlCf,WAAe,IAAAC,EAC2BC,oBAAS,GADpCC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACNK,EADMH,EAAA,GACQI,EADRJ,EAAA,GAEPK,EAAeC,mBACfC,EACJF,GACAA,EAAaG,SACbH,EAAaG,QAAQC,wBAAwBF,MACzCG,EAAW,GACjB,GAAIP,GAAgBI,EAClB,IAAI,IAAII,EAAM,EAAGA,EAAM,IAAMA,GAAY,IACvC,IAAK,IAAIC,EAAI,EAAGA,EAAIL,EAAOK,GAAQ,GACjCF,EAASG,KAAKzB,EAAAC,EAAAC,cAACb,EAAD,CAASqC,IAAG,GAAAhC,OAAK8B,EAAL,KAAA9B,OAAU6B,GAAOtC,EAAGuC,EAAGjC,EAAGgC,KAM1D,OACEvB,EAAAC,EAAAC,cAAAF,EAAAC,EAAA0B,SAAA,KACE3B,EAAAC,EAAAC,cAAA,OAAK0B,IAAKX,EAAcY,UAAWC,IAAOC,KACxC/B,EAAAC,EAAAC,cAACrB,EAAD,CACEsB,YAAY,QACZrB,KAAK,MACLkD,eAAgB,kBAAMhB,GAAgB,IACtCZ,MAAO,CAAE6B,OAAQ,MAJnB,0BASDX,ICrDaY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxC,EAAAC,EAAAC,cAACuC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,kCElInBC,EAAAC,QAAA,CAAkBpB,IAAA","file":"static/js/main.62367d74.chunk.js","sourcesContent":["import React, { useState, useRef } from \"react\";\nimport pose from \"react-pose\";\n\nimport styles from \"./App.module.scss\";\n\nconst Header = pose.h1({\n  start: {\n    x: \"-100vw\"\n  },\n  end: {\n    x: 0,\n    transition: {\n      duration: 1000\n    }\n  }\n});\nfunction Balloon({ x, y }) {\n  const Posed = pose.span({\n    start: {\n      y: y\n    },\n    end: {\n      y: `-${Math.ceil(Math.random() * 100000)}vh`,\n      transition: {\n        type: 'tween',\n        duration: 100000,\n        ease: 'circIn'\n      }\n    }\n  })\n  return (\n    <Posed initialPose=\"start\" pose=\"end\" style={{ fontSize: \"60px\", position: \"fixed\", left: x, bottom: 0 }}>\n      ðŸŽ‰\n    </Posed>\n  );\n}\nfunction App() {\n  const [showBalloons, setShowBalloons] = useState(false);\n  const refContainer = useRef();\n  const width =\n    refContainer &&\n    refContainer.current &&\n    refContainer.current.getBoundingClientRect().width;\n  const balloons = [];\n  if (showBalloons && width) {\n    for(let row = 0; row < 1000; row = row + 100) {\n      for (let i = 0; i < width; i = i + 60) {\n        balloons.push(<Balloon key={`${i}-${row}`} x={i} y={row} />);\n      }\n    }\n    \n  }\n\n  return (\n    <>\n      <div ref={refContainer} className={styles.app}>\n        <Header\n          initialPose=\"start\"\n          pose=\"end\"\n          onPoseComplete={() => setShowBalloons(true)}\n          style={{ zIndex: 1000}}\n        >\n          Congratulations Beth!\n        </Header>\n      </div>\n      {balloons}\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__3XgP_\"};"],"sourceRoot":""}